[![Gem Version](https://badge.fury.io/rb/transpec.png)](http://badge.fury.io/rb/transpec) [![Dependency Status](https://gemnasium.com/yujinakayama/transpec.png)](https://gemnasium.com/yujinakayama/transpec) [![Build Status](https://travis-ci.org/yujinakayama/transpec.png?branch=master)](https://travis-ci.org/yujinakayama/transpec) [![Coverage Status](https://coveralls.io/repos/yujinakayama/transpec/badge.png)](https://coveralls.io/r/yujinakayama/transpec) [![Code Climate](https://codeclimate.com/github/yujinakayama/transpec.png)](https://codeclimate.com/github/yujinakayama/transpec)

# Transpec

**Transpec** automatically converts your specs into latest [RSpec](http://rspec.info/) syntax with static analysis.

This aims to facilitate smooth transition to RSpec 3.

See the following pages for the new RSpec syntax and the plan for RSpec 3:

* [Myron Marston » RSpec's New Expectation Syntax](http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax)
* [RSpec's new message expectation syntax - Tea is awesome.](http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/)
* [Myron Marston » The Plan for RSpec 3](http://myronmars.to/n/dev-blog/2013/07/the-plan-for-rspec-3)

Note that Transpec does not yet support all conversions for the RSpec changes,
and also the changes for RSpec 3 is not fixed and may vary in the future.
So it's recommended to follow updates of both RSpec and Transpec.

## Examples

Here's an example spec:

```ruby
<%=
example = <<END
describe Account do
  subject(:account) { Account.new(logger) }
  let(:logger) { mock('logger') }

  describe '#balance' do
    context 'initially' do
      it 'is zero' do
        account.balance.should == 0
      end
    end
  end

  describe '#close' do
    it 'logs an account closed message' do
      logger.should_receive(:account_closed).with(account)
      account.close
    end
  end

  describe '#renew' do
    context 'when the account is renewable and not closed' do
      before do
        account.stub(:renewable? => true, :closed? => false)
      end

      it 'does not raise error' do
        lambda { account.renew }.should_not raise_error(Account::RenewalError)
      end
    end
  end
end
END
-%>
```

Transpec would convert it to the following form:

```ruby
<%= Transpec::Converter.new.convert(example) -%>
```

### Real Examples

You can see real conversion examples below:

* https://github.com/yujinakayama/guard/commit/transpec-demo
* https://github.com/yujinakayama/mail/commit/transpec-demo
* https://github.com/yujinakayama/twitter/commit/transpec-demo

## Installation

```bash
$ gem install transpec
```

## Basic Usage

Before converting your specs:

* Make sure your project has `rspec` gem dependency `<%= rspec_version %>` or later. If not, change your `*.gemspec` or `Gemfile` to do so.
* Run `rspec` and check if all the specs pass.
* Ensure the Git repository is clean. (You don't want to mix up your changes and Transpec's changes, right?)

Then, run `transpec` (using `--generate-commit-message` is recommended) in the project root directory:

```bash
$ cd some-project
$ transpec --generate-commit-message
Processing spec/spec_helper.rb
Processing spec/spec_spec.rb
Processing spec/support/file_helper.rb
Processing spec/support/shared_context.rb
Processing spec/transpec/ast/scanner_spec.rb
Processing spec/transpec/ast/scope_stack_spec.rb
```

This will convert and overwrite all spec files in the `spec` directory.

After the conversion, run `rspec` again and check whether all pass:

```bash
$ bundle exec rspec
# ...
843 examples, 0 failures
```

If all pass, commit the changes with auto-generated message:

```bash
$ git add -u
$ git commit -eF .git/COMMIT_EDITMSG
```

And you are done!

## Options

### `-f/--force`

Force processing even if the current Git repository is not clean.

```bash
$ git status --short
 M spec/spec_helper.rb
$ transpec
The current Git repository is not clean. Aborting.
$ transpec --force
Processing spec/spec_helper.rb
Processing spec/spec_spec.rb
Processing spec/support/file_helper.rb
```

### `-m/--generate-commit-message`

Generate commit message that describes conversion summary.
Currently only Git is supported.

When you commit, you need to run the following command to use the generated message:

```bash
$ git commit -eF .git/COMMIT_EDITMSG
```

### `-d/--disable`

Disable specific conversions.

```bash
$ transpec --disable expect_to_receive,allow_to_receive
```

#### Available conversion types

Conversion Type     | Target Syntax                    | Converted Syntax
--------------------|----------------------------------|----------------------------
<%=
conversion_type_table = <<END
`expect_to_matcher` | `obj.should matcher`             | `expect(obj).to matcher`
`expect_to_receive` | `obj.should_receive`             | `expect(obj).to receive`
`allow_to_receive`  | `obj.stub`                       | `allow(obj).to receive`
`have_items`        | `expect(obj).to have(x).items`   | `expect(obj.size).to eq(x)`
`deprecated`        | `obj.stub!`, `mock('foo')`, etc. | `obj.stub`, `double('foo')`
END

types_in_readme = conversion_type_table.lines.map do |line|
  first_column = line.split('|').first
  first_column.gsub(/[^\w]/, '').to_sym
end.sort

types_in_code = Transpec::OptionParser.available_conversion_types.sort

unless types_in_readme == types_in_code
  types_missing_description = types_in_code - types_in_readme
  fail "No descriptions for conversion types #{types_missing_description}"
end

conversion_type_table
-%>

### `-n/--negative-form`

Specify negative form of `to` that is used in `expect` syntax.
Either `not_to` or `to_not`.
`not_to` is used by default.

```bash
$ transpec --negative-form to_not
```

### `-p/--no-parentheses-matcher-arg`

Suppress parenthesizing argument of matcher when converting
`should` with operator matcher to `expect` with non-operator matcher
(`expect` syntax does not directly support the operator matchers).
Note that it will be parenthesized even if this option is specified
when parentheses are necessary to keep the meaning of the expression.

```ruby
<%=
parenthesizing_example = <<END
describe 'original spec' do
  it 'is an example' do
    1.should == 1
    2.should > 1
    'string'.should =~ /^str/
    [1, 2, 3].should =~ [2, 1, 3]
    { key: value }.should == { key: value }
  end
end
END
-%>

<%=
Transpec::Converter.new.convert(parenthesizing_example).gsub(
  'original spec',
  'converted spec'
)
-%>

<%=
configuration = Transpec::Configuration.new
configuration.parenthesize_matcher_arg = false
converter = Transpec::Converter.new(configuration)
converter.convert(parenthesizing_example)
  .gsub(
    'original spec',
    'converted spec with -p/--no-parentheses-matcher-arg option'
  )
  .gsub(/^.+\{ key: value \}/) do |match|
    "    # With non-operator method, the parentheses are always required\n" +
    "    # to prevent the hash from being interpreted as a block.\n" +
    match
  end
-%>
```

## Inconvertible Specs

You might see the following warning while conversion:

```
Cannot convert #should into #expect since #expect is not available in the context.
spec/awesome_spec.rb:4:      1.should == 1
```

This message would be shown with specs like this:

```ruby
describe '#should that cannot be converted to #expect' do
  class MyAwesomeTestRunner
    def run
      1.should == 1
    end
  end

  it 'is 1' do
    test_runner = MyAwesomeTestRunner.new
    test_runner.run
  end
end
```

### Reason

* `should` is defined on `Kernel` module that is included by `Object` class, so you can use `should` almost everywhere.
* `expect` is defined on `RSpec::Matchers` module that is included by `RSpec::Core::ExampleGroup` class, so you can use `expect` only where `self` is an instance of `RSpec::Core::ExampleGroup` (i.e. in `it` blocks, `:each` hook blocks or included methods).

With the above example, in the context of `1.should == 1`, the `self` is an instance of `MyAwesomeTestRunner`.
Transpec tracks contexts and skips conversion if the target syntax cannot be converted in a case like this.

### Solution

You need to rewrite the spec by yourself.

## Supported Conversions

### Standard expectations

```ruby
# Targets
obj.should matcher
obj.should_not matcher

# Converted
expect(obj).to matcher
expect(obj).not_to matcher
expect(obj).to_not matcher # with `--negative-form to_not`
```

* Disabled by: `--disable expect_to_matcher`
* See also: [Myron Marston » RSpec's New Expectation Syntax](http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax)

### Operator matchers

```ruby
# Targets
1.should == 1
1.should < 2
Integer.should === 1
'string'.should =~ /^str/
[1, 2, 3].should =~ [2, 1, 3]

# Converted
expect(1).to eq(1)
expect(1).to be < 2
expect(Integer).to be === 1
expect('string').to match(/^str/)
expect([1, 2, 3]).to match_array([2, 1, 3])
```

* See also: [(Almost) All Matchers Are Supported - RSpec's New Expectation Syntax](http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax#almost_all_matchers_are_supported)

### `be_close` matcher

```ruby
# Targets
(1.0 / 3.0).should be_close(0.333, 0.001)

# Converted
(1.0 / 3.0).should be_within(0.001).of(0.333)
```

* Disabled by: `--disable deprecated`
* See also: [New be within matcher and RSpec.deprecate fix · rspec/rspec-expectations](https://github.com/rspec/rspec-expectations/pull/32)

### `have(n).items` matcher

```ruby
# Targets
expect(collection).to have(3).items
expect(collection).to have_exactly(3).items
expect(collection).to have_at_least(3).items
expect(collection).to have_at_most(3).items
collection.should have(3).items

expect(team).to have(3).players

# Assume #players is a private method.
expect(team).to have(3).players

# Converted
expect(collection.size).to eq(3)
expect(collection.size).to be >= 3
expect(collection.size).to be <= 3
collection.size.should == 3  # with `--disable expect_to_matcher`

expect(team.players.size).to eq(3)

# have(n).items matcher invokes #players even if it's a private method.
expect(team.send(:players).size).to eq(3)
```

You have the option to continue using `have(n).items` matcher with [rspec-collection_matchers](https://github.com/rspec/rspec-collection_matchers) that is an external gem extracted from `rspec-expectations`.
If you choose so, disable this conversion with `--disable have_items`.

* Disabled by: `--disable have_items`
* See also: [Expectations: have(x).items matchers will be moved into an external gem - The Plan for RSpec 3](http://myronmars.to/n/dev-blog/2013/07/the-plan-for-rspec-3#expectations__matchers_will_be_moved_into_an_external_gem)

### Expectations on Proc

```ruby
# Targets
lambda { do_something }.should raise_error
proc { do_something }.should raise_error
-> { do_something }.should raise_error

# Converted
expect { do_something }.to raise_error
```

* Disabled by: `--disable expect_to_matcher`
* See also: [Unification of Block vs. Value Syntaxes - RSpec's New Expectation Syntax](http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax#unification_of_block_vs_value_syntaxes)

### Negative error expectations with specific error

```ruby
# Targets
expect { do_something }.not_to raise_error(SomeErrorClass)
expect { do_something }.not_to raise_error('message')
expect { do_something }.not_to raise_error(SomeErrorClass, 'message')
lambda { do_something }.should_not raise_error(SomeErrorClass)

# Converted
expect { do_something }.not_to raise_error
lambda { do_something }.should_not raise_error # with `--disable expect_to_matcher`
```

* Disabled by: `--disable deprecated`
* See also: [Consider deprecating `expect { }.not_to raise_error(SpecificErrorClass)` · rspec/rspec-expectations](https://github.com/rspec/rspec-expectations/issues/231)

### Message expectations

```ruby
# Targets
obj.should_receive(:foo)
SomeClass.any_instance.should_receive(:foo)

# Converted
expect(obj).to receive(:foo)
expect_any_instance_of(SomeClass).to receive(:foo)
```

* Disabled by: `--disable expect_to_receive`
* See also: [RSpec's new message expectation syntax - Tea is awesome.](http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/)

### Message expectations that are actually method stubs

```ruby
# Targets
obj.should_receive(:foo).any_number_of_times
obj.should_receive(:foo).at_least(0)

SomeClass.any_instance.should_receive(:foo).any_number_of_times
SomeClass.any_instance.should_receive(:foo).at_least(0)

# Converted
allow(obj).to receive(:foo)
obj.stub(:foo) # with `--disable allow_to_receive`

allow_any_instance_of(SomeClass).to receive(:foo)
SomeClass.any_instance.stub(:foo) # with `--disable allow_to_receive`
```

* Disabled by: `--disable deprecated`
* See also: [Don't allow at_least(0) · rspec/rspec-mocks](https://github.com/rspec/rspec-mocks/issues/133)

### Method stubs

```ruby
# Targets
obj.stub(:foo)

obj.stub!(:foo)

obj.stub(:foo => 1, :bar => 2)

SomeClass.any_instance.stub(:foo)

# Converted
allow(obj).to receive(:foo)

allow(obj).to receive(:foo)

allow(obj).to receive(:foo).and_return(1)
allow(obj).to receive(:bar).and_return(2)

allow_any_instance_of(SomeClass).to receive(:foo)
```

* Disabled by: `--disable allow_to_receive`
* See also: [RSpec's new message expectation syntax - Tea is awesome.](http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/)

### Deprecated method stub aliases

```ruby
# Targets
obj.stub!(:foo)
obj.unstub!(:foo)

# Converted
obj.stub(:foo) # with `--disable allow_to_receive`
obj.unstub(:foo)
```

* Disabled by: `--disable deprecated`
* See also: [Consider deprecating and/or removing #stub! and #unstub! at some point · rspec/rspec-mocks](https://github.com/rspec/rspec-mocks/issues/122)

### Method stubs with deprecated specification of number of times

```ruby
# Targets
obj.stub(:foo).any_number_of_times
obj.stub(:foo).at_least(0)

# Converted
allow(obj).to receive(:foo)
obj.stub(:foo) # with `--disable allow_to_receive`
```

* Disabled by: `--disable deprecated`
* See also: [Don't allow at_least(0) · rspec/rspec-mocks](https://github.com/rspec/rspec-mocks/issues/133)

### Deprecated test double aliases

```ruby
# Targets
stub('something')
mock('something')

# Converted
double('something')
```

* Disabled by: `--disable deprecated`
* See also: [Deprecate "stub" for doubles · rspec/rspec-mocks](https://github.com/rspec/rspec-mocks/issues/214)

## Compatibility

Tested on MRI 1.9, MRI 2.0 and JRuby in 1.9 mode.

## Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request

## License

Copyright (c) 2013 Yuji Nakayama

See the [LICENSE.txt](LICENSE.txt) for details.
